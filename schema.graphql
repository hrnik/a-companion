"""
 A keystone list
"""
type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  password_is_set: Boolean
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

enum SortUsersBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UsersUpdateInput {
  id: ID!
  data: UserUpdateInput
}

input UserCreateInput {
  name: String
  email: String
  password: String
}

input UsersCreateInput {
  data: UserCreateInput
}

"""
 A keystone list
"""
type Task {
  id: ID!
  title: String
  attempts(
    where: AttemptWhereInput! = {}
    search: String
    sortBy: [SortAttemptsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [AttemptOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Attempt!]
  _attemptsMeta(
    where: AttemptWhereInput! = {}
    search: String
    sortBy: [SortAttemptsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [AttemptOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use attemptsCount instead."
    )
  attemptsCount(where: AttemptWhereInput! = {}): Int
}

type _QueryMeta {
  count: Int
}

input TaskWhereInput {
  AND: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  title: String
  title_not: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  title_i: String
  title_not_i: String
  title_contains_i: String
  title_not_contains_i: String
  title_starts_with_i: String
  title_not_starts_with_i: String
  title_ends_with_i: String
  title_not_ends_with_i: String
  title_in: [String]
  title_not_in: [String]

  """
   condition must be true for all nodes
  """
  attempts_every: AttemptWhereInput

  """
   condition must be true for at least 1 node
  """
  attempts_some: AttemptWhereInput

  """
   condition must be false for all nodes
  """
  attempts_none: AttemptWhereInput
}

input TaskWhereUniqueInput {
  id: ID
  title: String
}

enum SortTasksBy {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
}

input TaskOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input TaskUpdateInput {
  title: String
  attempts: AttemptRelateToManyInput
}

input AttemptRelateToManyInput {
  create: [AttemptCreateInput]
  connect: [AttemptWhereUniqueInput]
  disconnect: [AttemptWhereUniqueInput]
  disconnectAll: Boolean
}

input TasksUpdateInput {
  id: ID!
  data: TaskUpdateInput
}

input TaskCreateInput {
  title: String
  attempts: AttemptRelateToManyInput
}

input TasksCreateInput {
  data: TaskCreateInput
}

"""
 A keystone list
"""
type Attempt {
  id: ID!
  date: String
  status: String
  task: Task
}

input AttemptWhereInput {
  AND: [AttemptWhereInput!]
  OR: [AttemptWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: String
  date_not: String
  date_lt: String
  date_lte: String
  date_gt: String
  date_gte: String
  date_in: [String]
  date_not_in: [String]
  status: String
  status_not: String
  status_in: [String]
  status_not_in: [String]
  task: TaskWhereInput
  task_is_null: Boolean
}

input AttemptWhereUniqueInput {
  id: ID
}

enum SortAttemptsBy {
  id_ASC
  id_DESC
  date_ASC
  date_DESC
  status_ASC
  status_DESC
}

input AttemptOrderByInput {
  id: OrderDirection
  date: OrderDirection
  status: OrderDirection
}

input AttemptUpdateInput {
  date: String
  status: String
  task: TaskRelateToOneInput
}

input TaskRelateToOneInput {
  create: TaskCreateInput
  connect: TaskWhereUniqueInput
  disconnect: TaskWhereUniqueInput
  disconnectAll: Boolean
}

input AttemptsUpdateInput {
  id: ID!
  data: AttemptUpdateInput
}

input AttemptCreateInput {
  date: String
  status: String
  task: TaskRelateToOneInput
}

input AttemptsCreateInput {
  data: AttemptCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  """
   Create a single User item.
  """
  createUser(data: UserCreateInput): User

  """
   Create multiple User items.
  """
  createUsers(data: [UsersCreateInput]): [User]

  """
   Update a single User item by ID.
  """
  updateUser(id: ID!, data: UserUpdateInput): User

  """
   Update multiple User items by ID.
  """
  updateUsers(data: [UsersUpdateInput]): [User]

  """
   Delete a single User item by ID.
  """
  deleteUser(id: ID!): User

  """
   Delete multiple User items by ID.
  """
  deleteUsers(ids: [ID!]): [User]

  """
   Create a single Task item.
  """
  createTask(data: TaskCreateInput): Task

  """
   Create multiple Task items.
  """
  createTasks(data: [TasksCreateInput]): [Task]

  """
   Update a single Task item by ID.
  """
  updateTask(id: ID!, data: TaskUpdateInput): Task

  """
   Update multiple Task items by ID.
  """
  updateTasks(data: [TasksUpdateInput]): [Task]

  """
   Delete a single Task item by ID.
  """
  deleteTask(id: ID!): Task

  """
   Delete multiple Task items by ID.
  """
  deleteTasks(ids: [ID!]): [Task]

  """
   Create a single Attempt item.
  """
  createAttempt(data: AttemptCreateInput): Attempt

  """
   Create multiple Attempt items.
  """
  createAttempts(data: [AttemptsCreateInput]): [Attempt]

  """
   Update a single Attempt item by ID.
  """
  updateAttempt(id: ID!, data: AttemptUpdateInput): Attempt

  """
   Update multiple Attempt items by ID.
  """
  updateAttempts(data: [AttemptsUpdateInput]): [Attempt]

  """
   Delete a single Attempt item by ID.
  """
  deleteAttempt(id: ID!): Attempt

  """
   Delete multiple Attempt items by ID.
  """
  deleteAttempts(ids: [ID!]): [Attempt]
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult!
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  endSession: Boolean!
}

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  """
   Search for all User items which match the where clause.
  """
  allUsers(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [User!]

  """
   Search for the User item with the matching ID.
  """
  User(where: UserWhereUniqueInput!): User

  """
   Perform a meta-query on all User items which match the where clause.
  """
  _allUsersMeta(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use usersCount instead."
    )
  usersCount(where: UserWhereInput! = {}): Int

  """
   Search for all Task items which match the where clause.
  """
  allTasks(
    where: TaskWhereInput! = {}
    search: String
    sortBy: [SortTasksBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [TaskOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Task!]

  """
   Search for the Task item with the matching ID.
  """
  Task(where: TaskWhereUniqueInput!): Task

  """
   Perform a meta-query on all Task items which match the where clause.
  """
  _allTasksMeta(
    where: TaskWhereInput! = {}
    search: String
    sortBy: [SortTasksBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [TaskOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use tasksCount instead."
    )
  tasksCount(where: TaskWhereInput! = {}): Int

  """
   Search for all Attempt items which match the where clause.
  """
  allAttempts(
    where: AttemptWhereInput! = {}
    search: String
    sortBy: [SortAttemptsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [AttemptOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Attempt!]

  """
   Search for the Attempt item with the matching ID.
  """
  Attempt(where: AttemptWhereUniqueInput!): Attempt

  """
   Perform a meta-query on all Attempt items which match the where clause.
  """
  _allAttemptsMeta(
    where: AttemptWhereInput! = {}
    search: String
    sortBy: [SortAttemptsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [AttemptOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use attemptsCount instead."
    )
  attemptsCount(where: AttemptWhereInput! = {}): Int
  authenticatedItem: AuthenticatedItem
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
